FROM ubuntu:16.04 as souffle
RUN apt-get -y update && \
    apt-get -y install software-properties-common && \
    add-apt-repository ppa:jonathonf/gcc-7.1 && \
    apt-get -y update
RUN apt-get -y update && apt-get -y install automake bison build-essential \
    doxygen flex g++ g++-7 gcc gcc-7 git libffi-dev libtool  \
    make mcpp pkg-config sqlite3 libsqlite3-dev zlib1g-dev

RUN git clone -b 1.7.1 https://github.com/souffle-lang/souffle
RUN cd souffle && sh ./bootstrap
RUN cd souffle && CC=gcc-7 CXX=g++-7 ./configure --prefix=/usr --enable-64bit-domain --disable-ncurses
RUN cd souffle && make -j4 install
RUN cd souffle && cp include/souffle/RamTypes.h /usr/include/souffle/

FROM ubuntu:16.04

ENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH

ARG CMAKE_VERSION=3.9
ARG BOOST_VERSION=1.67.0
ARG PROTOBUF_VERSION=3.7.0
ARG CXX_COMPILER=clang++-8

# Use bash for more convenient variable substitution syntax
SHELL ["/bin/bash", "-c"]

# Install common packages
RUN apt-get -y update && \
    apt-get -y install apt-transport-https curl git make python3 python3-pip software-properties-common wget

# Install libstdc++
RUN add-apt-repository ppa:jonathonf/gcc-7.1 && \
    apt-get -y update && \
    apt-get -y install libstdc++-7-dev

# Install Clang++
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add - && \
    add-apt-repository 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main' && \
    apt-get -y update && \
    apt-get -y install clang-8 libc++-8-dev && \
    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 60 \
                        --slave /usr/bin/clang++ clang++ /usr/bin/clang++-8 && \
    update-alternatives --install /usr/bin/cc cc /usr/bin/clang-8 60 && \
    update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-8 60

# Copy souffle
RUN apt-get -y install autoconf automake \
    doxygen libtool mcpp pkg-config zlib1g-dev

COPY --from=souffle /usr/bin/souffle-compile /usr/bin/souffle-compile
COPY --from=souffle /usr/bin/souffle-config /usr/bin/souffle-config
COPY --from=souffle /usr/bin/souffle /usr/bin/souffle
COPY --from=souffle /usr/bin/souffle-profile /usr/bin/souffle-profile
COPY --from=souffle /usr/include/souffle/ /usr/include/souffle

# Install CMake
RUN curl -SL https://cmake.org/files/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.0-Linux-x86_64.tar.gz \
    |tar -xz --strip-components=1 -C /usr/local

RUN ldconfig

# Install Boost
RUN curl -L https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//./_}.tar.gz > boost.tar.gz && \
    tar vxfz boost.tar.gz > /dev/null && \
    cd boost_${BOOST_VERSION//./_} && \
    ./bootstrap.sh --prefix=/usr/local --with-libraries=filesystem,program_options,system --with-toolset=clang > /dev/null && \
    ./b2 install --prefix=/usr/local toolset=clang > /dev/null && \
    rm ../boost.tar.gz && \
    cd .. && \
    rm -rf boost_${BOOST_VERSION//./_}

# Install protobuf
RUN cd /usr/local/src \
    && wget https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-cpp-${PROTOBUF_VERSION}.tar.gz \
    && tar xf protobuf-cpp-${PROTOBUF_VERSION}.tar.gz \
    && cd protobuf-${PROTOBUF_VERSION} \
    && ./configure \
    && make \
    && make install \
    && cd .. \
    && rm -rf protobuf-${PROTOBUF_VERSION} protobuf-cpp-${PROTOBUF_VERSION}.tar.gz
RUN ldconfig

# Install capstone
RUN cd /usr/local/src \
    && git clone -b next https://github.com/GrammaTech/capstone.git \
    && cd capstone \
    && CAPSTONE_ARCHS=x86 ./make.sh \
    && CAPSTONE_ARCHS=x86 ./make.sh install

# Install LIEF
RUN cd /usr/local/src \
    && git clone -b 0.10.0 https://github.com/lief-project/LIEF.git \
    && cd LIEF \
    && mkdir build \
    && cd build \
    && cmake -DLIEF_PYTHON_API=off -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=Off .. \
    && make \
    && make install

COPY . /ddisasm

# Install GTIRB
RUN rm -rf /ddisasm/gtirb/build /ddisasm/gtirb/CMakeCache.txt /ddisasm/gtirb/CMakeFiles /ddisasm/gtirb/CMakeScripts
RUN cd /ddisasm/gtirb/ && cmake ./ -Bbuild -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DGTIRB_JAVA_API=OFF && cd build && which sudo 2>&1 >/dev/null && sudo make install || make install

# Install gtirb-pprinter
RUN rm -rf /ddisasm/gtirb-pprinter/build /ddisasm/gtirb-pprinter/CMakeCache.txt /ddisasm/gtirb-pprinter/CMakeFiles /ddisasm/gtirb-pprinter/CMakeScripts
RUN cd /ddisasm/gtirb-pprinter/ && cmake ./ -Bbuild -DCMAKE_CXX_COMPILER=${CXX_COMPILER} && cd build && make && make install

# Install ehp
RUN rm -rf /ddisasm/libehp/build /ddisasm/libehp/CMakeCache.txt /ddisasm/libehp/CMakeFiles /ddisasm/libehp/CMakeScripts
RUN cd /ddisasm/libehp/ && cmake ./ -Bbuild -DCMAKE_CXX_COMPILER=${CXX_COMPILER} && cd build &&  make && make install

ENV TERM xterm
ENV PATH=/ddisasm/build/bin:$PATH

RUN /ddisasm/.ci/build-linux.sh ${CXX_COMPILER}
ARG CPACK_GENERATOR=""
RUN if [ ! -z "${CPACK_GENERATOR}" ] ; then cd /ddisasm/build && cpack -G "${CPACK_GENERATOR}"; fi

WORKDIR /ddisasm/
